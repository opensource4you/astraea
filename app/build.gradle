/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

apply from: "$rootDir/gradle/dependencies.gradle"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    testImplementation libs["junit"]
    testImplementation libs["mockito-core"]
    testImplementation libs["mockito-inline"]
    testImplementation libs["kafka-core"]
    testImplementation libs["commons-io"]
    testImplementation project(':it')

    implementation project(':common')
    implementation project(':fs')
    implementation libs["kafka-client"]
    implementation libs["jcommander"]
    // we don't use slf4j actually, and it is used by kafka so we swallow the log.
    implementation libs["slf4j-nop"]
    implementation libs["opencsv"]
    implementation libs["commons-math3"]
    implementation libs["jackson-datatype-jdk8"]
}

application {
    // Define the main class for the application.
    mainClass = 'org.astraea.app.App'
    applicationDefaultJvmArgs = ["-server", "-XX:+UseG1GC", "-Djava.awt.headless=true"]
}

java {
    sourceCompatibility = 17
    targetCompatibility = 17
}

ext {
    numberOfForks = project.hasProperty('maxParallelForks') ? maxParallelForks.toInteger() : Math.max((int) (Runtime.runtime.availableProcessors() / 2), 1)
}

archivesBaseName = "astraea-app"

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    maxParallelForks = numberOfForks
    // make isolation for tests. It may be expensive but stability is first choice.
    forkEvery = 1
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
        exceptionFormat = 'full'
    }

    minHeapSize = "1024m"
    maxHeapSize = "2048m"
}