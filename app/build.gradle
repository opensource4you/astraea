/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

def versions = [
        kafka       : project.properties['kafka.version'] ?: "3.3.1",
        junit       : project.properties['junit.version'] ?: "5.9.1",
        mockito     : project.properties['mockito.version'] ?: "4.8.1",
        jcommander  : project.properties['jcommander.version'] ?: "1.82",
        slf4j       : project.properties['slf4j.version'] ?: "2.0.3",
        "commons-io": project.properties['commons-io.version'] ?: "2.11.0",
        "opencsv"   : project.properties['opencsv.version'] ?: "5.6",
        "math3"     : project.properties['math3.version'] ?: "3.6.1",
        jackson     : project.properties['jackson.version'] ?: "2.13.4",
]

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter:${versions["junit"]}"
    testImplementation "org.mockito:mockito-core:${versions["mockito"]}"
    testImplementation "org.mockito:mockito-inline:${versions["mockito"]}"
    testImplementation "org.apache.kafka:kafka_2.13:${versions["kafka"]}"
    testImplementation "commons-io:commons-io:${versions["commons-io"]}"
    testImplementation project(':it')

    implementation project(':common')
    implementation project(':fs')
    implementation "org.apache.kafka:kafka-clients:${versions["kafka"]}"
    implementation "com.beust:jcommander:${versions["jcommander"]}"
    // we don't use slf4j actually, and it is used by kafka so we swallow the log.
    implementation "org.slf4j:slf4j-nop:${versions["slf4j"]}"
    implementation "com.opencsv:opencsv:${versions["opencsv"]}"
    implementation "org.apache.commons:commons-math3:${versions["math3"]}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${versions["jackson"]}"
}

application {
    // Define the main class for the application.
    mainClass = 'org.astraea.app.App'
    applicationDefaultJvmArgs = ["-server", "-XX:+UseG1GC", "-Djava.awt.headless=true"]
}

java {
    sourceCompatibility = 11
    targetCompatibility = 11
}

ext {
    numberOfForks = project.hasProperty('maxParallelForks') ? maxParallelForks.toInteger() : Math.max((int) (Runtime.runtime.availableProcessors() / 2), 1)
}

archivesBaseName = "astraea-app"

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    maxParallelForks = numberOfForks
    // make isolation for tests. It may be expensive but stability is first choice.
    forkEvery = 1
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
        exceptionFormat = 'full'
    }

    minHeapSize = "512m"
    maxHeapSize = "2048m"
}