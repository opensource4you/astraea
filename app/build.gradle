/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'maven-publish'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

def versions = [
    kafka: project.properties['kafka.version'] ?: "3.1.1",
    junit: project.properties['junit.version'] ?: "5.8.2",
    mockito: project.properties['mockito.version'] ?: "4.2.0",
    jcommander: project.properties['jcommander.version'] ?: "1.81",
    slf4j: project.properties['slf4j.version'] ?: "1.7.32",
    zookeeper: project.properties['zookeeper.version'] ?: "3.6.3",
    gson: project.properties['gson.version'] ?: "2.9.0",
    wix: project.properties['wix.version'] ?: "4.6.2",
    mysql: project.properties['mysql.version'] ?: "8.0.29",
]

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter:${versions["junit"]}"
    testImplementation "org.mockito:mockito-core:${versions["mockito"]}"
    testImplementation "org.mockito:mockito-inline:${versions["mockito"]}"
    testImplementation "org.apache.zookeeper:zookeeper:${versions["zookeeper"]}"
    testImplementation "org.apache.kafka:kafka_2.12:${versions["kafka"]}"
    testImplementation "com.wix:wix-embedded-mysql:${versions["wix"]}"
    testImplementation "mysql:mysql-connector-java:${versions["mysql"]}"


    implementation "org.apache.kafka:kafka-clients:${versions["kafka"]}"
    implementation "com.beust:jcommander:${versions["jcommander"]}"
    // we don't use slf4j actually, and it is used by kafka so we swallow the log.
    implementation "org.slf4j:slf4j-nop:${versions["slf4j"]}"
    implementation "com.google.code.gson:gson:${versions["gson"]}"
}

application {
    // Define the main class for the application.
    mainClass = 'org.astraea.app.App'
    applicationDefaultJvmArgs = ["-server", "-XX:+UseG1GC", "-Djava.awt.headless=true"]
}

java {
    sourceCompatibility = 11
    targetCompatibility = 11
}

tasks.named('test') {
    int numberOfForks = project.hasProperty('maxParallelForks') ? maxParallelForks.toInteger() : Math.max((int) (Runtime.runtime.availableProcessors() / 2), 1)

    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    maxParallelForks = numberOfForks
    // make isolation for tests. It may be expensive but stability is first choice.
    forkEvery = 1
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
        exceptionFormat = 'full'
    }

    minHeapSize = "512m"
    maxHeapSize = "2048m"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'org.astraea'
            from components.java
        }
    }
    repositories {
        maven {
            url = "https://maven.pkg.github.com/skiptests/astraea"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}