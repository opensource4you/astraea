package org.astraea.performance;

import java.util.Collections;
import java.util.Map;
import java.util.Properties;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.internals.DefaultPartitioner;

/** An interface used for creating producer, consumer. */
public interface ComponentFactory {

  default Producer createProducer() {
    return createProducer(DefaultPartitioner.class.getName());
  }

  Producer createProducer(String partitionClassName);

  Consumer createConsumer();

  /**
   * Used for creating Kafka producer, consumer of the same Kafka server and the same topic. The
   * consumers generated by the same object from `fromKafka(brokers)` subscribe the same topic and
   * have the same groupID.
   */
  static ComponentFactory fromKafka(String brokers, String topic, Map<String, Object> config) {
    return new ComponentFactory() {
      private final String groupId = "groupId:" + System.currentTimeMillis();

      /** Create Producer with KafkaProducer<byte[], byte[]> functions */
      @Override
      public Producer createProducer(String partitionClassName) {
        var props = new Properties();
        props.putAll(config);
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, brokers);
        props.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, partitionClassName);
        return Producer.fromKafka(props, topic);
      }

      /** Create Consumer with KafkaConsumer<byte[], byte[]> functions */
      @Override
      public Consumer createConsumer() {
        var props = new Properties();
        props.putAll(config);
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, brokers);
        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);
        // always read data from beginning
        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
        return Consumer.fromKafka(props, Collections.singleton(topic));
      }
    };
  }
}
