package org.astraea.performance;

import java.util.Collection;
import java.util.Properties;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.producer.ProducerConfig;

/** An interface used for creating producer, consumer, admin. */
public interface ComponentFactory {
  Producer createProducer();

  Consumer createConsumer(Collection<String> topic);

  /**
   * Used for creating Kafka producer, consumer, admin of the same Kafka server. The consumers
   * generated by the same object from `fromKafka(brokers)` have the same groupID
   */
  static ComponentFactory fromKafka(String brokers) {
    return new ComponentFactory() {
      private final String groupId = "groupId:" + System.currentTimeMillis();
      /** Create Producer with KafkaProducer<byte[], byte[]> functions */
      @Override
      public Producer createProducer() {
        Properties prop = new Properties();
        prop.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, brokers);
        return Producer.fromKafka(prop);
      }

      /** Create Consumer with KafkaConsumer<byte[], byte[]> functions */
      @Override
      public Consumer createConsumer(Collection<String> topic) {
        Properties prop = new Properties();
        prop.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, brokers);
        prop.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);
        return Consumer.fromKafka(prop, topic);
      }
    };
  }
}
