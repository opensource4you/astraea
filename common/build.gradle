/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'java'
    id 'maven-publish'
    id "com.google.protobuf" version "0.9.2"
}

apply from: "$rootDir/gradle/dependencies.gradle"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}


dependencies {
    testImplementation libs["junit"]
    testImplementation libs["mockito-core"]
    testImplementation libs["mockito-inline"]
    testImplementation libs["commons-io"]
    testImplementation libs["kafka-connect-runtime"]
    testImplementation project(':it')


    implementation libs["kafka-client"]
    implementation libs["jackson-datatype-jdk8"]
    // we don't use slf4j actually, and it is used by kafka so we swallow the log.
    implementation libs["slf4j-nop"]
    implementation libs["opencsv"]
    implementation libs["commons-math3"]
    implementation 'com.google.protobuf:protobuf-java:3.22.2'
}

java {
    sourceCompatibility = 17
    targetCompatibility = 17
}

ext {
    numberOfForks = project.hasProperty('maxParallelForks') ? maxParallelForks.toInteger() : Math.max((int) (Runtime.runtime.availableProcessors() / 2), 1)
}

archivesBaseName = "astraea-common"

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.22.2'
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    maxParallelForks = numberOfForks
    // make isolation for tests. It may be expensive but stability is first choice.
    forkEvery = 1
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
        exceptionFormat = 'full'
    }

    minHeapSize = "1024m"
    maxHeapSize = "2048m"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'org.astraea'
            artifactId = 'astraea-common'
            from components.java
        }
    }
    repositories {
        maven {
            url = "https://maven.pkg.github.com/skiptests/astraea"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

private String exec(String[] args) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine args
        standardOutput = stdout
    }
    // If the shell is wrapped by cygwin, the line separator is changed to \n...
    // Hence, checking the separator manually is more suitable in this case
    def s = stdout.toString()
    if (s.contains("\r\n")) return s.replaceAll("\r\n", "")
    return s.replaceAll("\n", "")
}

import org.apache.tools.ant.taskdefs.condition.Os

import java.nio.file.Files

private String whoami() {
    try {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            def fullName = exec("whoami")
            def backslash = fullName.lastIndexOf("\\")
            if (backslash == -1) return fullName
            else fullName.substring(backslash + 1)
        } else return exec("whoami")
    } catch (Throwable ignored) {
        return "Unknown"
    }
}

private String user() {
    try {
        return exec("git", "config", "user.name")
    } catch (Throwable ignored) {
        // if git's user is not set, git will return exit code 1
        return whoami()
    }
}

private String revision() {
    try {
        return exec("git", "log", "-1", "--pretty=format:%H")
    } catch (Throwable ignored) {
        // if git's user is not set, git will return exit code 1
        return "Unknown"
    }
}

private static String date() {
    return new Date().format('yyyy-MM-dd HH:mm:ss')
}

private String version() {
    return project.version.toString()
}

task initializer {
    doLast {
        def file = java.nio.file.Path.of("$projectDir" + "/src/main/java/org/astraea/common/VersionUtils.java")
        Files.deleteIfExists(file)
        String code = """package org.astraea.common;
// DON'T touch this file!!! It is generated dynamically. see common/build.gradle
public final class VersionUtils {
  public static final String VERSION = \"${version()}\";
  public static final String BUILDER = \"${user()}\";
  public static final String REVISION = \"${revision()}\";
  public static final String DATE = \"${date()}\";
  private VersionUtils() {}
}
"""
        def writer = Files.newBufferedWriter(file)
        try {
            writer.write(code.replaceAll("\n", System.lineSeparator()))
        } finally {
            writer.close()
        }
    }
}

/**
 * Generating VersionUtils must run before compileJava.
 */
tasks.matching { it.name != 'initializer' && it.name == "compileJava" }.all { Task task ->
    task.dependsOn initializer
}