/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id 'maven-publish'
}

apply from: "$rootDir/gradle/dependencies.gradle"

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = 17
    targetCompatibility = 17
}

javafx {
    version = "17"
    modules = ['javafx.controls']
}

ext {
    numberOfForks = project.hasProperty('maxParallelForks') ? maxParallelForks.toInteger() : Math.max((int) (Runtime.runtime.availableProcessors() / 2), 1)
}

archivesBaseName = "astraea-gui"
jar {
    manifest {
        attributes 'Main-Class': 'org.astraea.gui.Main'
    }
}

dependencies {
    testImplementation libs["junit"]
    testImplementation project(':it')
    implementation project(':common')
    implementation libs["kafka-client"]
}

publishing {
    publications {
        binary(MavenPublication) {
            groupId = 'org.astraea'
            artifactId = 'astraea-gui'
            artifact shadowJar
        }
    }
    repositories {
        maven {
            url = "https://maven.pkg.github.com/skiptests/astraea"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    maxParallelForks = numberOfForks
    // make isolation for tests. It may be expensive but stability is first choice.
    forkEvery = 1
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
        exceptionFormat = 'full'
    }

    minHeapSize = "1024m"
    maxHeapSize = "2048m"
}